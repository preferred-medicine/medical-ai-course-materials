{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YwLb83DcpMOO"
   },
   "source": [
    "[![colab-logo](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/preferred-medicine/medical-ai-course-materials/blob/master/notebooks/Blood_Cell_Detection.ipynb)\n",
    "\n",
    "# Practice section: Detection of cells from microscope images of blood \n",
    "In this section, we will be working on the task of detecting blood cells. We will try to find a method that can predict **the type and position of each cells** when a microscope image of human blood is given. We are mainly interested in these types of cells. \n",
    "\n",
    "- Red Blood Cell (RBC)\n",
    "- White Blood Cell (WBC)\n",
    "- Platelet\n",
    "\n",
    "This enables us to see how many of the above cells are in the given image as well as their location in the image.\n",
    "\n",
    "Such tasks are commonly referred to as **object detection**. The goal is to estimate the following metrics for each object of interest individually (here, for example, the above three kinds of cells), from an input image.\n",
    "\n",
    "1.  The smallest area rectangle (called Bounding box)\n",
    "2.  \"What is inside object\" = class label\n",
    "\n",
    "However, since **the number objects included in the image is not known beforehand**, the method has to be capable of outputting a set of **a Bounding box and predicted value of a class label** for the arbitrary number (or the sufficient number) of objects.\n",
    "\n",
    "Bounding box (hereinafter bbox) is typically defined in the form of [`The y coordinate of the upper left corner of the rectangle`, `The x coordinate of the upper left corner of the rectangle`, `The y coordinate of the lower right corner of the rectangle`, `The x coordinate of the lower right corner of the rectangle`], and the class is typically represented by ID assigned to each type of object (hereinafter class label). For example, it is common to uniquely assign a non-negative integers to a corresponding target object, such as, in this case, 0 for RBC, 1 for WBC and 2 for Platelet.\n",
    "\n",
    "Here's an image from the data set of the cell image used in this article, with the bbox given as correct answer on the image and the name of the corresponding class visualized.\n",
    "\n",
    "The red rectangle is what is called bbox. You can see that different rectangles surround each target blood cell one by one. A white label is displayed so as to overlap the upper side of this rectangle. It represents the type (class) of the object inside the rectangle.\n",
    "\n",
    "\n",
    "![An example of detecting RBC, WBC, Platelet from an microscope image of blood](https://raw.githubusercontent.com/preferred-medicine/medical-ai-course-materials/master/notebooks/images/detection_samples.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "mksH_eu3NxKB"
   },
   "source": [
    "##  Environment Setting \n",
    "\n",
    "First of all, let's finish installing Python package such as Chainer, CuPy, ChainerCV, matplotlib by running the following cell on Colab for environment building. These steps are the same as before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "d7wNK-q472Qo"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n",
      "                                 Dload  Upload   Total   Spent    Left  Speed\n",
      "100  1580  100  1580    0     0   90 0      0 --:--:-- --:--:-- --:--:--     047      0 --:--:-- --:--:-- --:--:--  9080\n",
      "sh: line 9: nvidia-smi: command not found\n",
      "********************************************************************************\n",
      "GPU is not enabled!\n",
      "Open \"Runtime\" > \"Change runtime type\" and set \"Hardware accelerator\" to \"GPU\".\n",
      "********************************************************************************\n",
      "Collecting chainercv\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e0/b9/02d9eb0ff60db1b9e5ffb1d89f8ee26764784a0f9f37a7342cb665e8de38/chainercv-0.12.0.tar.gz (239kB)\n",
      "\u001b[K    100% |████████████████████████████████| 245kB 6.5MB/s ta 0:00:01\n",
      "\u001b[?25hCollecting matplotlib\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/2e/81/bb51214944e79f9c9261badd7ef99b573fb0bc9110c0075c6a9e76224d0d/matplotlib-3.0.3-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl (14.3MB)\n",
      "\u001b[K    100% |████████████████████████████████| 14.3MB 2.9MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting chainer>=5.0 (from chainercv)\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/12/ed/8b923bc28345c5b3e53358ba7e5e09b02142fc612378fd90986cf40073ef/chainer-5.4.0.tar.gz (525kB)\n",
      "\u001b[K    100% |████████████████████████████████| 532kB 4.6MB/s ta 0:00:011\n",
      "\u001b[?25hCollecting Pillow (from chainercv)\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/22/55/2ce41fa510f131c776112a1d24ee90cddffc96f1bf0311efb14fdd8ae877/Pillow-6.0.0-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl (3.7MB)\n",
      "\u001b[K    100% |████████████████████████████████| 3.7MB 8.5MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /Users/ytakeda/venvs/py37/lib/python3.7/site-packages (from matplotlib) (2.4.0)\n",
      "Collecting numpy>=1.10.0 (from matplotlib)\n",
      "  Using cached https://files.pythonhosted.org/packages/a6/6f/cb20ccd8f0f8581e0e090775c0e3c3e335b037818416e6fa945d924397d2/numpy-1.16.2-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /Users/ytakeda/venvs/py37/lib/python3.7/site-packages (from matplotlib) (2.8.0)\n",
      "Collecting cycler>=0.10 (from matplotlib)\n",
      "  Using cached https://files.pythonhosted.org/packages/f7/d2/e07d3ebb2bd7af696440ce7e754c59dd546ffe1bbe732c8ab68b9c834e61/cycler-0.10.0-py2.py3-none-any.whl\n",
      "Collecting kiwisolver>=1.0.1 (from matplotlib)\n",
      "  Using cached https://files.pythonhosted.org/packages/68/f2/21ec13269a420c063a3d7d8c87dac030da7b00fc6b27fa88cfb1c72a645b/kiwisolver-1.0.1-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl\n",
      "Collecting filelock (from chainer>=5.0->chainercv)\n",
      "  Using cached https://files.pythonhosted.org/packages/d7/ca/3c74396a9ed8a4cfab5459800edeef9a1269591cb21f5a49bd71a49c5fa2/filelock-3.0.10-py3-none-any.whl\n",
      "Collecting protobuf>=3.0.0 (from chainer>=5.0->chainercv)\n",
      "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d7/08/a316e74d41a1f3d606dfc3b71cc068354e8b9a0232f46bc098aa50b37116/protobuf-3.7.1-cp37-cp37m-macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl (1.3MB)\n",
      "\u001b[K    100% |████████████████████████████████| 1.3MB 13.0MB/s ta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: six>=1.9.0 in /Users/ytakeda/venvs/py37/lib/python3.7/site-packages (from chainer>=5.0->chainercv) (1.12.0)\n",
      "Requirement already satisfied: setuptools in /Users/ytakeda/venvs/py37/lib/python3.7/site-packages (from kiwisolver>=1.0.1->matplotlib) (40.9.0)\n",
      "Building wheels for collected packages: chainercv, chainer\n",
      "  Building wheel for chainercv (setup.py) ... \u001b[?25lerror\n",
      "  Complete output from command /Users/ytakeda/venvs/py37/bin/python3.7 -u -c \"import setuptools, tokenize;__file__='/private/var/folders/zy/k24hng1d5nv2rkyjw13g189m0000gn/T/pip-install-qi6jpv_s/chainercv/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" bdist_wheel -d /private/var/folders/zy/k24hng1d5nv2rkyjw13g189m0000gn/T/pip-wheel-e1fn0414 --python-tag cp37:\n",
      "  running bdist_wheel\n",
      "  running build\n",
      "  running build_py\n",
      "  creating build\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv\n",
      "  copying chainercv/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests\n",
      "  copying tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental\n",
      "  copying chainercv/experimental/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/evaluations\n",
      "  copying chainercv/evaluations/eval_detection_voc.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/evaluations\n",
      "  copying chainercv/evaluations/eval_instance_segmentation_coco.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/evaluations\n",
      "  copying chainercv/evaluations/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/evaluations\n",
      "  copying chainercv/evaluations/eval_detection_coco.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/evaluations\n",
      "  copying chainercv/evaluations/eval_instance_segmentation_voc.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/evaluations\n",
      "  copying chainercv/evaluations/eval_semantic_segmentation.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/evaluations\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets\n",
      "  copying chainercv/datasets/siamese_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets\n",
      "  copying chainercv/datasets/mixup_soft_label_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets\n",
      "  copying chainercv/datasets/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets\n",
      "  copying chainercv/datasets/transform_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets\n",
      "  copying chainercv/datasets/directory_parsing_label_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/utils\n",
      "  copying chainercv/utils/link.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils\n",
      "  copying chainercv/utils/download.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils\n",
      "  copying chainercv/utils/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions\n",
      "  copying chainercv/extensions/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/visualizations\n",
      "  copying chainercv/visualizations/vis_instance_segmentation.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/visualizations\n",
      "  copying chainercv/visualizations/colormap.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/visualizations\n",
      "  copying chainercv/visualizations/vis_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/visualizations\n",
      "  copying chainercv/visualizations/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/visualizations\n",
      "  copying chainercv/visualizations/vis_image.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/visualizations\n",
      "  copying chainercv/visualizations/vis_point.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/visualizations\n",
      "  copying chainercv/visualizations/vis_semantic_segmentation.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/visualizations\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms\n",
      "  copying chainercv/transforms/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links\n",
      "  copying chainercv/links/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/functions\n",
      "  copying chainercv/functions/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/functions\n",
      "  copying chainercv/functions/psroi_pooling_2d.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/functions\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental\n",
      "  copying chainercv/chainer_experimental/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links\n",
      "  copying chainercv/experimental/links/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model\n",
      "  copying chainercv/experimental/links/model/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/fcis\n",
      "  copying chainercv/experimental/links/model/fcis/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/fcis\n",
      "  copying chainercv/experimental/links/model/fcis/fcis.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/fcis\n",
      "  copying chainercv/experimental/links/model/fcis/fcis_resnet101.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/fcis\n",
      "  copying chainercv/experimental/links/model/fcis/fcis_train_chain.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/fcis\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/pspnet\n",
      "  copying chainercv/experimental/links/model/pspnet/transforms.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/pspnet\n",
      "  copying chainercv/experimental/links/model/pspnet/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/pspnet\n",
      "  copying chainercv/experimental/links/model/pspnet/pspnet.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/pspnet\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/yolo\n",
      "  copying chainercv/experimental/links/model/yolo/yolo_v2_tiny.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/yolo\n",
      "  copying chainercv/experimental/links/model/yolo/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/yolo\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/fcis/utils\n",
      "  copying chainercv/experimental/links/model/fcis/utils/proposal_target_creator.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/fcis/utils\n",
      "  copying chainercv/experimental/links/model/fcis/utils/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/fcis/utils\n",
      "  copying chainercv/experimental/links/model/fcis/utils/mask_voting.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/experimental/links/model/fcis/utils\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/camvid\n",
      "  copying chainercv/datasets/camvid/camvid_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/camvid\n",
      "  copying chainercv/datasets/camvid/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/camvid\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/ade20k\n",
      "  copying chainercv/datasets/ade20k/ade20k_utils.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/ade20k\n",
      "  copying chainercv/datasets/ade20k/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/ade20k\n",
      "  copying chainercv/datasets/ade20k/ade20k_test_image_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/ade20k\n",
      "  copying chainercv/datasets/ade20k/ade20k_semantic_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/ade20k\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/sbd\n",
      "  copying chainercv/datasets/sbd/sbd_utils.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/sbd\n",
      "  copying chainercv/datasets/sbd/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/sbd\n",
      "  copying chainercv/datasets/sbd/sbd_instance_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/sbd\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/cub\n",
      "  copying chainercv/datasets/cub/cub_label_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/cub\n",
      "  copying chainercv/datasets/cub/cub_utils.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/cub\n",
      "  copying chainercv/datasets/cub/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/cub\n",
      "  copying chainercv/datasets/cub/cub_point_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/cub\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/coco\n",
      "  copying chainercv/datasets/coco/coco_semantic_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/coco\n",
      "  copying chainercv/datasets/coco/coco_bbox_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/coco\n",
      "  copying chainercv/datasets/coco/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/coco\n",
      "  copying chainercv/datasets/coco/coco_instance_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/coco\n",
      "  copying chainercv/datasets/coco/coco_utils.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/coco\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/online_products\n",
      "  copying chainercv/datasets/online_products/online_products_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/online_products\n",
      "  copying chainercv/datasets/online_products/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/online_products\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/voc\n",
      "  copying chainercv/datasets/voc/voc_utils.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/voc\n",
      "  copying chainercv/datasets/voc/voc_instance_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/voc\n",
      "  copying chainercv/datasets/voc/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/voc\n",
      "  copying chainercv/datasets/voc/voc_bbox_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/voc\n",
      "  copying chainercv/datasets/voc/voc_semantic_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/voc\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/cityscapes\n",
      "  copying chainercv/datasets/cityscapes/cityscapes_semantic_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/cityscapes\n",
      "  copying chainercv/datasets/cityscapes/cityscapes_utils.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/cityscapes\n",
      "  copying chainercv/datasets/cityscapes/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/cityscapes\n",
      "  copying chainercv/datasets/cityscapes/cityscapes_test_image_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/datasets/cityscapes\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/image\n",
      "  copying chainercv/utils/image/tile_images.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/image\n",
      "  copying chainercv/utils/image/write_image.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/image\n",
      "  copying chainercv/utils/image/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/image\n",
      "  copying chainercv/utils/image/read_image.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/image\n",
      "  copying chainercv/utils/image/read_label.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/image\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing\n",
      "  copying chainercv/utils/testing/constant_stub_link.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing\n",
      "  copying chainercv/utils/testing/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing\n",
      "  copying chainercv/utils/testing/generate_random_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/iterator\n",
      "  copying chainercv/utils/iterator/progress_hook.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/iterator\n",
      "  copying chainercv/utils/iterator/unzip.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/iterator\n",
      "  copying chainercv/utils/iterator/apply_to_iterator.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/iterator\n",
      "  copying chainercv/utils/iterator/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/iterator\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/mask\n",
      "  copying chainercv/utils/mask/mask_to_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/mask\n",
      "  copying chainercv/utils/mask/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/mask\n",
      "  copying chainercv/utils/mask/mask_iou.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/mask\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/bbox\n",
      "  copying chainercv/utils/bbox/non_maximum_suppression.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/bbox\n",
      "  copying chainercv/utils/bbox/bbox_iou.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/bbox\n",
      "  copying chainercv/utils/bbox/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/bbox\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_instance_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_point_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_semantic_segmentation_link.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_detection_link.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_label_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_instance_segmentation_link.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_image.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_bbox_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_point.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  copying chainercv/utils/testing/assertions/assert_is_semantic_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/testing/assertions\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions/evaluator\n",
      "  copying chainercv/extensions/evaluator/detection_voc_evaluator.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions/evaluator\n",
      "  copying chainercv/extensions/evaluator/instance_segmentation_voc_evaluator.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions/evaluator\n",
      "  copying chainercv/extensions/evaluator/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions/evaluator\n",
      "  copying chainercv/extensions/evaluator/detection_coco_evaluator.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions/evaluator\n",
      "  copying chainercv/extensions/evaluator/instance_segmentation_coco_evaluator.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions/evaluator\n",
      "  copying chainercv/extensions/evaluator/semantic_segmentation_evaluator.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions/evaluator\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions/vis_report\n",
      "  copying chainercv/extensions/vis_report/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions/vis_report\n",
      "  copying chainercv/extensions/vis_report/detection_vis_report.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/extensions/vis_report\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/point\n",
      "  copying chainercv/transforms/point/translate_point.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/point\n",
      "  copying chainercv/transforms/point/flip_point.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/point\n",
      "  copying chainercv/transforms/point/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/point\n",
      "  copying chainercv/transforms/point/resize_point.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/point\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/random_sized_crop.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/center_crop.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/pca_lighting.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/resize.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/ten_crop.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/resize_contain.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/flip.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/random_flip.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/rotate.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/random_expand.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/scale.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/random_rotate.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  copying chainercv/transforms/image/random_crop.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/image\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/bbox\n",
      "  copying chainercv/transforms/bbox/translate_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/bbox\n",
      "  copying chainercv/transforms/bbox/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/bbox\n",
      "  copying chainercv/transforms/bbox/crop_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/bbox\n",
      "  copying chainercv/transforms/bbox/rotate_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/bbox\n",
      "  copying chainercv/transforms/bbox/resize_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/bbox\n",
      "  copying chainercv/transforms/bbox/flip_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/transforms/bbox\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/connection\n",
      "  copying chainercv/links/connection/conv_2d_activ.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/connection\n",
      "  copying chainercv/links/connection/seblock.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/connection\n",
      "  copying chainercv/links/connection/conv_2d_bn_activ.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/connection\n",
      "  copying chainercv/links/connection/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/connection\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model\n",
      "  copying chainercv/links/model/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model\n",
      "  copying chainercv/links/model/pickable_sequential_chain.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model\n",
      "  copying chainercv/links/model/pixelwise_softmax_classifier.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model\n",
      "  copying chainercv/links/model/feature_predictor.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/ssd\n",
      "  copying chainercv/links/model/ssd/multibox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/ssd\n",
      "  copying chainercv/links/model/ssd/transforms.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/ssd\n",
      "  copying chainercv/links/model/ssd/multibox_coder.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/ssd\n",
      "  copying chainercv/links/model/ssd/ssd.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/ssd\n",
      "  copying chainercv/links/model/ssd/normalize.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/ssd\n",
      "  copying chainercv/links/model/ssd/multibox_loss.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/ssd\n",
      "  copying chainercv/links/model/ssd/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/ssd\n",
      "  copying chainercv/links/model/ssd/gradient_scaling.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/ssd\n",
      "  copying chainercv/links/model/ssd/ssd_vgg16.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/ssd\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/resnet\n",
      "  copying chainercv/links/model/resnet/resblock.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/resnet\n",
      "  copying chainercv/links/model/resnet/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/resnet\n",
      "  copying chainercv/links/model/resnet/resnet.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/resnet\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/senet\n",
      "  copying chainercv/links/model/senet/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/senet\n",
      "  copying chainercv/links/model/senet/se_resnext.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/senet\n",
      "  copying chainercv/links/model/senet/se_resnet.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/senet\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn\n",
      "  copying chainercv/links/model/faster_rcnn/region_proposal_network.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn\n",
      "  copying chainercv/links/model/faster_rcnn/faster_rcnn.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn\n",
      "  copying chainercv/links/model/faster_rcnn/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn\n",
      "  copying chainercv/links/model/faster_rcnn/faster_rcnn_train_chain.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn\n",
      "  copying chainercv/links/model/faster_rcnn/faster_rcnn_vgg.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/yolo\n",
      "  copying chainercv/links/model/yolo/yolo_base.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/yolo\n",
      "  copying chainercv/links/model/yolo/yolo_v2.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/yolo\n",
      "  copying chainercv/links/model/yolo/yolo_v3.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/yolo\n",
      "  copying chainercv/links/model/yolo/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/yolo\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/segnet\n",
      "  copying chainercv/links/model/segnet/segnet_basic.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/segnet\n",
      "  copying chainercv/links/model/segnet/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/segnet\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/fpn\n",
      "  copying chainercv/links/model/fpn/misc.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/fpn\n",
      "  copying chainercv/links/model/fpn/fpn.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/fpn\n",
      "  copying chainercv/links/model/fpn/faster_rcnn_fpn_resnet.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/fpn\n",
      "  copying chainercv/links/model/fpn/rpn.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/fpn\n",
      "  copying chainercv/links/model/fpn/faster_rcnn.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/fpn\n",
      "  copying chainercv/links/model/fpn/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/fpn\n",
      "  copying chainercv/links/model/fpn/head.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/fpn\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/vgg\n",
      "  copying chainercv/links/model/vgg/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/vgg\n",
      "  copying chainercv/links/model/vgg/vgg16.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/vgg\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn/utils\n",
      "  copying chainercv/links/model/faster_rcnn/utils/anchor_target_creator.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn/utils\n",
      "  copying chainercv/links/model/faster_rcnn/utils/proposal_target_creator.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn/utils\n",
      "  copying chainercv/links/model/faster_rcnn/utils/bbox2loc.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn/utils\n",
      "  copying chainercv/links/model/faster_rcnn/utils/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn/utils\n",
      "  copying chainercv/links/model/faster_rcnn/utils/loc2bbox.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn/utils\n",
      "  copying chainercv/links/model/faster_rcnn/utils/generate_anchor_base.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn/utils\n",
      "  copying chainercv/links/model/faster_rcnn/utils/proposal_creator.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/links/model/faster_rcnn/utils\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/training\n",
      "  copying chainercv/chainer_experimental/training/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/training\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/datasets\n",
      "  copying chainercv/chainer_experimental/datasets/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/datasets\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/training/extensions\n",
      "  copying chainercv/chainer_experimental/training/extensions/make_shift.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/training/extensions\n",
      "  copying chainercv/chainer_experimental/training/extensions/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/training/extensions\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/datasets/sliceable\n",
      "  copying chainercv/chainer_experimental/datasets/sliceable/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/datasets/sliceable\n",
      "  copying chainercv/chainer_experimental/datasets/sliceable/sliceable_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/datasets/sliceable\n",
      "  copying chainercv/chainer_experimental/datasets/sliceable/concatenated_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/datasets/sliceable\n",
      "  copying chainercv/chainer_experimental/datasets/sliceable/getter_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/datasets/sliceable\n",
      "  copying chainercv/chainer_experimental/datasets/sliceable/transform_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/datasets/sliceable\n",
      "  copying chainercv/chainer_experimental/datasets/sliceable/tuple_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/chainercv/chainer_experimental/datasets/sliceable\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/functions_tests\n",
      "  copying tests/functions_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/functions_tests\n",
      "  copying tests/functions_tests/test_psroi_pooling_2d.py -> build/lib.macosx-10.14-x86_64-3.7/tests/functions_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests\n",
      "  copying tests/links_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests\n",
      "  copying tests/experimental_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests\n",
      "  copying tests/extensions_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/visualizations_tests\n",
      "  copying tests/visualizations_tests/test_vis_image.py -> build/lib.macosx-10.14-x86_64-3.7/tests/visualizations_tests\n",
      "  copying tests/visualizations_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/visualizations_tests\n",
      "  copying tests/visualizations_tests/test_vis_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/visualizations_tests\n",
      "  copying tests/visualizations_tests/test_vis_semantic_segmentation.py -> build/lib.macosx-10.14-x86_64-3.7/tests/visualizations_tests\n",
      "  copying tests/visualizations_tests/test_vis_point.py -> build/lib.macosx-10.14-x86_64-3.7/tests/visualizations_tests\n",
      "  copying tests/visualizations_tests/test_vis_instance_segmentation.py -> build/lib.macosx-10.14-x86_64-3.7/tests/visualizations_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests\n",
      "  copying tests/transforms_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests\n",
      "  copying tests/utils_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/evaluations_tests\n",
      "  copying tests/evaluations_tests/test_eval_semantic_segmentation.py -> build/lib.macosx-10.14-x86_64-3.7/tests/evaluations_tests\n",
      "  copying tests/evaluations_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/evaluations_tests\n",
      "  copying tests/evaluations_tests/test_eval_instance_segmentation_coco.py -> build/lib.macosx-10.14-x86_64-3.7/tests/evaluations_tests\n",
      "  copying tests/evaluations_tests/test_eval_instance_segmentation_voc.py -> build/lib.macosx-10.14-x86_64-3.7/tests/evaluations_tests\n",
      "  copying tests/evaluations_tests/test_eval_detection_voc.py -> build/lib.macosx-10.14-x86_64-3.7/tests/evaluations_tests\n",
      "  copying tests/evaluations_tests/test_eval_detection_coco.py -> build/lib.macosx-10.14-x86_64-3.7/tests/evaluations_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests\n",
      "  copying tests/datasets_tests/test_transform_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests\n",
      "  copying tests/datasets_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests\n",
      "  copying tests/datasets_tests/test_siamese_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests\n",
      "  copying tests/datasets_tests/test_mixup_soft_label_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests\n",
      "  copying tests/datasets_tests/test_directory_parsing_label_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests\n",
      "  copying tests/chainer_experimental_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/connection_tests\n",
      "  copying tests/links_tests/connection_tests/test_conv_2d_activ.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/connection_tests\n",
      "  copying tests/links_tests/connection_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/connection_tests\n",
      "  copying tests/links_tests/connection_tests/test_conv_2d_bn_activ.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/connection_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests\n",
      "  copying tests/links_tests/model_tests/test_feature_predictor.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests\n",
      "  copying tests/links_tests/model_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests\n",
      "  copying tests/links_tests/model_tests/test_pixelwise_softmax_classifier.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests\n",
      "  copying tests/links_tests/model_tests/test_pickable_sequential_chain.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/test_ssd.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/test_gradient_scaling.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/test_multibox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/test_random_crop_with_bbox_constraints.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/test_random_distort.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/test_multibox_loss.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/test_ssd_vgg16.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/test_resize_with_random_interpolation.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/test_multibox_coder.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  copying tests/links_tests/model_tests/ssd_tests/test_normalize.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/ssd_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/dummy_faster_rcnn.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/test_faster_rcnn.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/test_faster_rcnn_vgg.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/test_region_proposal_network.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/test_faster_rcnn_train_chain.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/senet_tests\n",
      "  copying tests/links_tests/model_tests/senet_tests/test_se_resnet.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/senet_tests\n",
      "  copying tests/links_tests/model_tests/senet_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/senet_tests\n",
      "  copying tests/links_tests/model_tests/senet_tests/test_se_resnext.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/senet_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/resnet_tests\n",
      "  copying tests/links_tests/model_tests/resnet_tests/test_resnet.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/resnet_tests\n",
      "  copying tests/links_tests/model_tests/resnet_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/resnet_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/fpn_tests\n",
      "  copying tests/links_tests/model_tests/fpn_tests/test_faster_rcnn.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/fpn_tests\n",
      "  copying tests/links_tests/model_tests/fpn_tests/test_fpn.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/fpn_tests\n",
      "  copying tests/links_tests/model_tests/fpn_tests/test_rpn.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/fpn_tests\n",
      "  copying tests/links_tests/model_tests/fpn_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/fpn_tests\n",
      "  copying tests/links_tests/model_tests/fpn_tests/test_head.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/fpn_tests\n",
      "  copying tests/links_tests/model_tests/fpn_tests/test_faster_rcnn_fpn_resnet.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/fpn_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/yolo_tests\n",
      "  copying tests/links_tests/model_tests/yolo_tests/test_yolo_v3.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/yolo_tests\n",
      "  copying tests/links_tests/model_tests/yolo_tests/test_yolo_v2.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/yolo_tests\n",
      "  copying tests/links_tests/model_tests/yolo_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/yolo_tests\n",
      "  copying tests/links_tests/model_tests/yolo_tests/test_yolo_base.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/yolo_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/vgg_tests\n",
      "  copying tests/links_tests/model_tests/vgg_tests/test_vgg16.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/vgg_tests\n",
      "  copying tests/links_tests/model_tests/vgg_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/vgg_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/segnet_tests\n",
      "  copying tests/links_tests/model_tests/segnet_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/segnet_tests\n",
      "  copying tests/links_tests/model_tests/segnet_tests/test_segnet_basic.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/segnet_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests/utils_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/utils_tests/test_proposal_creator.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests/utils_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/utils_tests/test_generate_anchor_base.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests/utils_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/utils_tests/test_proposal_target_creator.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests/utils_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/utils_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests/utils_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/utils_tests/test_anchor_target_creator.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests/utils_tests\n",
      "  copying tests/links_tests/model_tests/faster_rcnn_tests/utils_tests/test_bbox2loc_loc2bbox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/links_tests/model_tests/faster_rcnn_tests/utils_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests\n",
      "  copying tests/experimental_tests/links_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/pspnet_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/pspnet_tests/test_pspnet.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/pspnet_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/pspnet_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/pspnet_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/pspnet_tests/test_convolution_crop.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/pspnet_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/fcis_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/fcis_tests/test_fcis_resnet101.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/fcis_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/fcis_tests/test_fcis_train_chain.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/fcis_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/fcis_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/fcis_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/fcis_tests/test_fcis.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/fcis_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/fcis_tests/utils_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/fcis_tests/utils_tests/test_proposal_target_creator.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/fcis_tests/utils_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/fcis_tests/utils_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/fcis_tests/utils_tests\n",
      "  copying tests/experimental_tests/links_tests/model_tests/fcis_tests/utils_tests/test_mask_voting.py -> build/lib.macosx-10.14-x86_64-3.7/tests/experimental_tests/links_tests/model_tests/fcis_tests/utils_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests/evaluator_tests\n",
      "  copying tests/extensions_tests/evaluator_tests/test_instance_segmentation_voc_evaluator.py -> build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests/evaluator_tests\n",
      "  copying tests/extensions_tests/evaluator_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests/evaluator_tests\n",
      "  copying tests/extensions_tests/evaluator_tests/test_instance_segmentation_coco_evaluator.py -> build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests/evaluator_tests\n",
      "  copying tests/extensions_tests/evaluator_tests/test_detection_voc_evaluator.py -> build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests/evaluator_tests\n",
      "  copying tests/extensions_tests/evaluator_tests/test_detection_coco_evaluator.py -> build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests/evaluator_tests\n",
      "  copying tests/extensions_tests/evaluator_tests/test_semantic_segmentation_evaluator.py -> build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests/evaluator_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests/vis_report_tests\n",
      "  copying tests/extensions_tests/vis_report_tests/test_detection_vis_report.py -> build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests/vis_report_tests\n",
      "  copying tests/extensions_tests/vis_report_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/extensions_tests/vis_report_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_resize.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_center_crop.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_resize_contain.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_rotate.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_scale.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_flip_transform.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_random_flip.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_random_sized_crop.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_pca_lighting.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_random_crop.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_ten_crop.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_random_rotate.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  copying tests/transforms_tests/image_tests/test_random_expand.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/image_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/point_tests\n",
      "  copying tests/transforms_tests/point_tests/test_resize_point.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/point_tests\n",
      "  copying tests/transforms_tests/point_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/point_tests\n",
      "  copying tests/transforms_tests/point_tests/test_flip_point.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/point_tests\n",
      "  copying tests/transforms_tests/point_tests/test_translate_point.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/point_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/bbox_tests\n",
      "  copying tests/transforms_tests/bbox_tests/test_crop_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/bbox_tests\n",
      "  copying tests/transforms_tests/bbox_tests/test_flip_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/bbox_tests\n",
      "  copying tests/transforms_tests/bbox_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/bbox_tests\n",
      "  copying tests/transforms_tests/bbox_tests/test_translate_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/bbox_tests\n",
      "  copying tests/transforms_tests/bbox_tests/test_rotate_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/bbox_tests\n",
      "  copying tests/transforms_tests/bbox_tests/test_resize_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/transforms_tests/bbox_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/image_tests\n",
      "  copying tests/utils_tests/image_tests/test_write_image.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/image_tests\n",
      "  copying tests/utils_tests/image_tests/test_read_label.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/image_tests\n",
      "  copying tests/utils_tests/image_tests/test_tile_images.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/image_tests\n",
      "  copying tests/utils_tests/image_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/image_tests\n",
      "  copying tests/utils_tests/image_tests/test_read_image.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/image_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/iterator_tests\n",
      "  copying tests/utils_tests/iterator_tests/test_progress_hook.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/iterator_tests\n",
      "  copying tests/utils_tests/iterator_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/iterator_tests\n",
      "  copying tests/utils_tests/iterator_tests/test_apply_to_iterator.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/iterator_tests\n",
      "  copying tests/utils_tests/iterator_tests/test_unzip.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/iterator_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/mask_tests\n",
      "  copying tests/utils_tests/mask_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/mask_tests\n",
      "  copying tests/utils_tests/mask_tests/test_mask_iou.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/mask_tests\n",
      "  copying tests/utils_tests/mask_tests/test_mask_to_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/mask_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests\n",
      "  copying tests/utils_tests/testing_tests/test_generate_random_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests\n",
      "  copying tests/utils_tests/testing_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests\n",
      "  copying tests/utils_tests/testing_tests/test_constant_stub_link.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/bbox_tests\n",
      "  copying tests/utils_tests/bbox_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/bbox_tests\n",
      "  copying tests/utils_tests/bbox_tests/test_bbox_iou.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/bbox_tests\n",
      "  copying tests/utils_tests/bbox_tests/test_non_maximum_suppression.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/bbox_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/test_assert_is_bbox_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/test_assert_is_image.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/test_assert_is_point_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/test_assert_is_point.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/test_assert_is_instance_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/test_assert_is_bbox.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/test_assert_is_semantic_segmentation_link.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/test_assert_is_detection_link.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/test_assert_is_semantic_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  copying tests/utils_tests/testing_tests/assertions_tests/test_assert_is_label_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/utils_tests/testing_tests/assertions_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/cityscapes_tests\n",
      "  copying tests/datasets_tests/cityscapes_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/cityscapes_tests\n",
      "  copying tests/datasets_tests/cityscapes_tests/test_cityscapes.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/cityscapes_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/online_products_tests\n",
      "  copying tests/datasets_tests/online_products_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/online_products_tests\n",
      "  copying tests/datasets_tests/online_products_tests/test_online_products_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/online_products_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/cub_tests\n",
      "  copying tests/datasets_tests/cub_tests/test_cub_point_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/cub_tests\n",
      "  copying tests/datasets_tests/cub_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/cub_tests\n",
      "  copying tests/datasets_tests/cub_tests/test_cub_label_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/cub_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/ade20k_tests\n",
      "  copying tests/datasets_tests/ade20k_tests/test_ade20k.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/ade20k_tests\n",
      "  copying tests/datasets_tests/ade20k_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/ade20k_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/coco_tests\n",
      "  copying tests/datasets_tests/coco_tests/test_coco_semantic_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/coco_tests\n",
      "  copying tests/datasets_tests/coco_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/coco_tests\n",
      "  copying tests/datasets_tests/coco_tests/test_coco_bbox_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/coco_tests\n",
      "  copying tests/datasets_tests/coco_tests/test_coco_instance_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/coco_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/voc_tests\n",
      "  copying tests/datasets_tests/voc_tests/test_voc_bbox_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/voc_tests\n",
      "  copying tests/datasets_tests/voc_tests/test_voc_instance_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/voc_tests\n",
      "  copying tests/datasets_tests/voc_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/voc_tests\n",
      "  copying tests/datasets_tests/voc_tests/test_voc_semantic_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/voc_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/camvid_tests\n",
      "  copying tests/datasets_tests/camvid_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/camvid_tests\n",
      "  copying tests/datasets_tests/camvid_tests/test_camvid_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/camvid_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/sbd_tests\n",
      "  copying tests/datasets_tests/sbd_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/sbd_tests\n",
      "  copying tests/datasets_tests/sbd_tests/test_sbd_instance_segmentation_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/datasets_tests/sbd_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/datasets_tests\n",
      "  copying tests/chainer_experimental_tests/datasets_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/datasets_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/training_tests\n",
      "  copying tests/chainer_experimental_tests/training_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/training_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/datasets_tests/sliceable_tests\n",
      "  copying tests/chainer_experimental_tests/datasets_tests/sliceable_tests/test_concatenated_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/datasets_tests/sliceable_tests\n",
      "  copying tests/chainer_experimental_tests/datasets_tests/sliceable_tests/test_transform_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/datasets_tests/sliceable_tests\n",
      "  copying tests/chainer_experimental_tests/datasets_tests/sliceable_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/datasets_tests/sliceable_tests\n",
      "  copying tests/chainer_experimental_tests/datasets_tests/sliceable_tests/test_getter_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/datasets_tests/sliceable_tests\n",
      "  copying tests/chainer_experimental_tests/datasets_tests/sliceable_tests/test_tuple_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/datasets_tests/sliceable_tests\n",
      "  copying tests/chainer_experimental_tests/datasets_tests/sliceable_tests/test_sliceable_dataset.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/datasets_tests/sliceable_tests\n",
      "  creating build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/training_tests/extensions_tests\n",
      "  copying tests/chainer_experimental_tests/training_tests/extensions_tests/__init__.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/training_tests/extensions_tests\n",
      "  copying tests/chainer_experimental_tests/training_tests/extensions_tests/test_make_shift.py -> build/lib.macosx-10.14-x86_64-3.7/tests/chainer_experimental_tests/training_tests/extensions_tests\n",
      "  running egg_info\n",
      "  writing chainercv.egg-info/PKG-INFO\n",
      "  writing dependency_links to chainercv.egg-info/dependency_links.txt\n",
      "  writing requirements to chainercv.egg-info/requires.txt\n",
      "  writing top-level names to chainercv.egg-info/top_level.txt\n",
      "  reading manifest file 'chainercv.egg-info/SOURCES.txt'\n",
      "  reading manifest template 'MANIFEST.in'\n",
      "  warning: no previously-included files matching '*.pyx' found under directory 'chainercv'\n",
      "  writing manifest file 'chainercv.egg-info/SOURCES.txt'\n",
      "  copying chainercv/utils/bbox/_nms_gpu_post.c -> build/lib.macosx-10.14-x86_64-3.7/chainercv/utils/bbox\n",
      "  running build_ext\n",
      "  Traceback (most recent call last):\n",
      "    File \"/Users/ytakeda/venvs/py37/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 359, in get_provider\n",
      "      module = sys.modules[moduleOrReq]\n",
      "  KeyError: 'numpy'\n",
      "  \n",
      "  During handling of the above exception, another exception occurred:\n",
      "  \n",
      "  Traceback (most recent call last):\n",
      "    File \"<string>\", line 1, in <module>\n",
      "    File \"/private/var/folders/zy/k24hng1d5nv2rkyjw13g189m0000gn/T/pip-install-qi6jpv_s/chainercv/setup.py\", line 117, in <module>\n",
      "      cmdclass=cmdclass,\n",
      "    File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/core.py\", line 148, in setup\n",
      "      dist.run_commands()\n",
      "    File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/dist.py\", line 966, in run_commands\n",
      "      self.run_command(cmd)\n",
      "    File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/dist.py\", line 985, in run_command\n",
      "      cmd_obj.run()\n",
      "    File \"/Users/ytakeda/venvs/py37/lib/python3.7/site-packages/wheel/bdist_wheel.py\", line 192, in run\n",
      "      self.run_command('build')\n",
      "    File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/cmd.py\", line 313, in run_command\n",
      "      self.distribution.run_command(command)\n",
      "    File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/dist.py\", line 985, in run_command\n",
      "      cmd_obj.run()\n",
      "    File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/command/build.py\", line 135, in run\n",
      "      self.run_command(cmd_name)\n",
      "    File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/cmd.py\", line 313, in run_command\n",
      "      self.distribution.run_command(command)\n",
      "    File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/dist.py\", line 985, in run_command\n",
      "      cmd_obj.run()\n",
      "    File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/distutils/command/build_ext.py\", line 340, in run\n",
      "      self.build_extensions()\n",
      "    File \"/private/var/folders/zy/k24hng1d5nv2rkyjw13g189m0000gn/T/pip-install-qi6jpv_s/chainercv/setup.py\", line 77, in build_extensions\n",
      "      numpy_incl = pkg_resources.resource_filename('numpy', 'core/include')\n",
      "    File \"/Users/ytakeda/venvs/py37/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 1144, in resource_filename\n",
      "      return get_provider(package_or_requirement).get_resource_filename(\n",
      "    File \"/Users/ytakeda/venvs/py37/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 361, in get_provider\n",
      "      __import__(moduleOrReq)\n",
      "  ModuleNotFoundError: No module named 'numpy'\n",
      "  \n",
      "  ----------------------------------------\n",
      "\u001b[31m  Failed building wheel for chainercv\u001b[0m\n",
      "\u001b[?25h  Running setup.py clean for chainercv\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Building wheel for chainer (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Stored in directory: /Users/ytakeda/Library/Caches/pip/wheels/eb/18/d2/5e85cbd7f32026e5e72cc466a5a17fd1939e99ffeeaaea267b\n",
      "Successfully built chainer\n",
      "Failed to build chainercv\n",
      "Installing collected packages: filelock, numpy, protobuf, chainer, Pillow, chainercv, cycler, kiwisolver, matplotlib\n",
      "  Running setup.py install for chainercv ... \u001b[?25ldone\n",
      "\u001b[?25hSuccessfully installed Pillow-6.0.0 chainer-5.4.0 chainercv-0.12.0 cycler-0.10.0 filelock-3.0.10 kiwisolver-1.0.1 matplotlib-3.0.3 numpy-1.16.2 protobuf-3.7.1\n"
     ]
    }
   ],
   "source": [
    "!curl https://colab.chainer.org/install | sh -  # Install Chainer and CuPy\n",
    "!pip install chainercv matplotlib               # Install ChainerCV and matplotlib"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "4HJ3fgCTppe6"
   },
   "source": [
    "Let's confirm by executing the following cells that the setup of the environment succeeded. /"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 251
    },
    "colab_type": "code",
    "id": "J4eLK_2xpDV5",
    "outputId": "8c29d4e7-dd1a-4e55-9433-3b9331e41a8e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Platform: Linux-4.14.65+-x86_64-with-Ubuntu-18.04-bionic\n",
      "Chainer: 5.0.0\n",
      "NumPy: 1.14.6\n",
      "CuPy:\n",
      "  CuPy Version          : 5.0.0\n",
      "  CUDA Root             : /usr/local/cuda\n",
      "  CUDA Build Version    : 9020\n",
      "  CUDA Driver Version   : 9020\n",
      "  CUDA Runtime Version  : 9020\n",
      "  cuDNN Build Version   : 7201\n",
      "  cuDNN Version         : 7201\n",
      "  NCCL Build Version    : 2213\n",
      "iDeep: 2.0.0.post3\n"
     ]
    }
   ],
   "source": [
    "import chainer\n",
    "\n",
    "chainer.print_runtime_info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "57IgNNGD4-Q2"
   },
   "source": [
    "##  Object Detection \n",
    "\n",
    "Object detection is one of the tasks that is still being actively studied in Computer Vision application field, and it plays an important role in a wide range of fields such as autonomous driving and robotics. Unlike Semantic Segmentation, we do not recognize the shape (contour) of the object, but we will output the type and position for each object individually.\n",
    "\n",
    "When we call a \"type of object\" a class, we can call an individual object belonging to that class as an instance. Then, when there are pictures of two dogs, it can be said that there are two instances belonging to the class \"dog\". In other words, while the task of the Semantic Segmentation we learned in the previous chapter did not output regions per instance, the output of the object detection ouputs a result for each instance (output different bbox per instance). Sometimes we express the style of such output with the word \"instance-wise\".\n",
    "\n",
    "Starting with the method announced in 2014 called [R-CNN](https://arxiv.org/abs/1311.2524), various refinement methods have been proposed for the object detection method using the neural network. The object detection methods such as [R-CNN](https://arxiv.org/abs/1311.2524), [Fast R-CNN](https://arxiv.org/abs/1504.08083), and [Faster R-CNN](https://arxiv.org/abs/1506.01497) estimate object candidates first, then estimate object classes and positions in detail for each candidate. This is called a **two stage** type.\n",
    "\n",
    "On the other hand, although it is based on CNN, there is a method called **single stage** type . [SSD](https://arxiv.org/abs/1512.02325), [YOLO](https://arxiv.org/abs/1506.02640), [YOLOv2](https://arxiv.org/abs/1612.08242), [YOLOv3](https://arxiv.org/abs/1804.02767), etc. are well known as single stage type. They do not generate candidates for objects but estimate the class and position of each object directly. In general, the single stage type is said to be faster than the two stage type, while the accuracy is said to be lower. However, recently the boundaries of these methods have become ambiguous, and performance differences are almost gone.\n",
    "\n",
    "Next, we will challenge the task of extracting the position and type of three types of cells from cell images using SSD, one of single stage type object detection methods."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "wNTZ0qnEpvHr"
   },
   "source": [
    "## Preparing the data set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "wtoqG815k6rm"
   },
   "source": [
    "###  Downlaoding data set \n",
    "\n",
    "First , prepare a data set of blood microscopic images called [BCCD Dataset](https://github.com/Shenggan/BCCD_Dataset). This data set contains 364 images and XML files with file names corresponding to each image. In the XML file, the coordinate information of the bounding box surrounding one of three cells, RBC, WBC, Platelet, which appeared in the corresponding image, is stored. Because there are cases where multiple images are contained in one image, the XML file may contain descriptions about multiple cells.\n",
    "\n",
    "The BCCD Dataset is very small compared to the benchmark dataset widely used for object detection research, and it is distributed on Github. Let's download the dataset by running the following cell. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 107
    },
    "colab_type": "code",
    "id": "AXaoRznUquZ-",
    "outputId": "8b398fd8-6c71-435a-fb8e-0575efd004b7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into 'BCCD_Dataset'...\n",
      "remote: Enumerating objects: 786, done.\u001b[K\n",
      "remote: Total 786 (delta 0), reused 0 (delta 0), pack-reused 786\u001b[K\n",
      "Receiving objects: 100% (786/786), 7.34 MiB | 2.02 MiB/s, done.\n",
      "Resolving deltas: 100% (375/375), done.\n"
     ]
    }
   ],
   "source": [
    "!if [ ! -d BCCD_Dataset ]; then git clone https://github.com/Shenggan/BCCD_Dataset.git; fi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "bBg6xjP6qviM"
   },
   "source": [
    "When the download is complete, let's take a look at the files under the directory `BCCD_Datasetlet`. This data set is distributed with the following file structure.\n",
    "\n",
    "```\n",
    " BCCD\n",
    " |-- Annotations\n",
    " |   |\n",
    " |   `-- BloodImage_00XYZ.xml (364 items)\n",
    " |\n",
    " |-- ImageSets\n",
    " |   |\n",
    " |   `-- Main\n",
    " |       |\n",
    " |       |-- test.txt\n",
    " |       |-- train.txt\n",
    " |       `-- val.txt\n",
    " |\n",
    " `-- JPEGImages\n",
    "   |\n",
    "    `-- BloodImage_00XYZ.jpg (364 items)\n",
    " ```\n",
    "\n",
    "This configuration is consistent with the format of the **Pascal VOC dataset** that has been used as a standard benchmark dataset for object detection for many years. Therefore, it is possible to divert classes that make it easy to handle Pascal VOC data set provided by ChainerCV.\n",
    "\n",
    "There are several other directories, but we will only use the ones included in the above file tree. The following description explains what is included in each directory.\n",
    "\n",
    "- **Annotations directory:** In the same format as the Pascal VOC data set, correct answer information on **what position is present** for each cell image is stored. Correct information is stored as an XML file, and it is saved with the same file name except the extension so that the relationship with the image file is easy to understand.\n",
    "- **ImageSets directory:** A text file containing a list of images to be used for each of the training data set (train), the verification data set (val), and the test data set (test). Based on these lists, we use images listed up in `train.txt` for training, images listed up in `val.txt` for validation (dataset splits used to get a general idea of generalization performance during training), and images listed up in `test.txt` for final performance evaluation after the training.\n",
    "- **JPEGImages directory:** Contains all image data included in this data set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YNCwXii8W4It"
   },
   "source": [
    "###  Creating Dataset Object\n",
    "\n",
    "ChainerCV has convenient classes for easily reading Pascal VOC dataset. We inherit this and override the method `_get_annotations` so that we can read the dataset used this time. Only one line needs to be changed. Let's copy the corresponding code (`_get_annotations` method part) from [here](https://github.com/chainer/chainercv/blob/v0.10.0/chainercv/datasets/voc/voc_bbox_dataset.py#L90-L115), apply the following changes, and add it as a method of the `VOCBboxDataset` inheriting `BCCDDataset`class. (Basically, the following code means, delete the line that begins with `-`, and add the line that starts with `+`.)\n",
    "\n",
    "```\n",
    "- label.append(voc_utils.voc_bbox_label_names.index(name))\n",
    "+ label.append(bccd_labels.index(name))\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "raamj0eXHDxj"
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import xml.etree.ElementTree as ET\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "from chainercv.datasets import VOCBboxDataset\n",
    "\n",
    "\n",
    "bccd_labels = ('rbc', 'wbc', 'platelets')\n",
    "\n",
    "\n",
    "class BCCDDataset(VOCBboxDataset):\n",
    "\n",
    "    def _get_annotations(self, i):\n",
    "        id_ = self.ids[i]\n",
    "\n",
    "        # Annotation data in Pascal VOC format is distributed in XML format\n",
    "        anno = ET.parse(\n",
    "            os.path.join(self.data_dir, 'Annotations', id_ + '.xml'))\n",
    "\n",
    "        # Import XML file, extract information such as bbox cordinates, size,\n",
    "        # class labels for each bbox, and add to the list\n",
    "        bbox = []\n",
    "        label = []\n",
    "        difficult = []\n",
    "        for obj in anno.findall('object'):\n",
    "            bndbox_anno = obj.find('bndbox')\n",
    "            \n",
    "            # Subtract 1 so that the coordinate value of bbox becomes 0-origin\n",
    "            bbox.append([\n",
    "                int(bndbox_anno.find(tag).text) - 1\n",
    "                for tag in ('ymin', 'xmin', 'ymax', 'xmax')])\n",
    "            name = obj.find('name').text.lower().strip()\n",
    "            label.append(bccd_labels.index(name))\n",
    "        bbox = np.stack(bbox).astype(np.float32)\n",
    "        label = np.stack(label).astype(np.int32)\n",
    "        \n",
    "        # In the original Pascal VOC, the attribute \"difficult\" is given as a\n",
    "        # true / false value for each image, but this time this is not used\n",
    "        # (since all the images are set to \"difficult = 0\" in this data set)\n",
    "        # When `use_difficult==False`, all elements in `difficult` are False.\n",
    "        difficult = np.array(difficult, dtype=np.bool)\n",
    "        return bbox, label, difficult"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "JYW5zyhnPKKq"
   },
   "source": [
    "We were able to prepare a class to perform data loading to use data set for training, verification and test etc. Now, let's create a dataset object for training, verification and testing using this class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 73
    },
    "colab_type": "code",
    "id": "sw3_oHpz442i",
    "outputId": "41464f98-844f-4666-d7b3-0d924d46cdcf"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/chainercv/datasets/voc/voc_bbox_dataset.py:63: UserWarning: please pick split from 'train', 'trainval', 'val'for 2012 dataset. For 2007 dataset, you can pick 'test' in addition to the above mentioned splits.\n",
      "  'please pick split from \\'train\\', \\'trainval\\', \\'val\\''\n"
     ]
    }
   ],
   "source": [
    "train_dataset = BCCDDataset('BCCD_Dataset/BCCD', 'train')\n",
    "valid_dataset = BCCDDataset('BCCD_Dataset/BCCD', 'val')\n",
    "test_dataset = BCCDDataset('BCCD_Dataset/BCCD', 'test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xPOfLkNZY8Bn"
   },
   "source": [
    "A warning may be displayed here, but you do not have to worry about it. It is because it uses the class which was originally specialized only for Pascal VOC data set for BCCD Dataset.\n",
    "\n",
    "We were able to create three dataset objects. Let's check each size (how many data are included)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 71
    },
    "colab_type": "code",
    "id": "4wLDoPNDZDaU",
    "outputId": "80c26e65-6729-426d-9225-a7bb361e549f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of images in \"train\" dataset: 205\n",
      "Number of images in \"valid\" dataset: 87\n",
      "Number of images in \"test\" dataset: 72\n"
     ]
    }
   ],
   "source": [
    "print('Number of images in \"train\" dataset:', len(train_dataset))\n",
    "print('Number of images in \"valid\" dataset:', len(valid_dataset))\n",
    "print('Number of images in \"test\" dataset:', len(test_dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "p6_rUqLVZ_Hp"
   },
   "source": [
    "Now, let's access to the first data of `train_dataset`.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "NaROwCSZaATl"
   },
   "outputs": [],
   "source": [
    "first_datum = train_dataset[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "bDtylp_LaGax"
   },
   "source": [
    "`train_dataset` is the object of the class `BCCDDataset` inherted from `VOCBboxDataset`. Therefore, except for the methods `_get_annotations` overridden above, it inherits features that are provided by `VOCBboxDataset` class. To learn what kind of functions are provided, let's see the class documentation: [VOCBboxDataset](https://chainercv.readthedocs.io/en/stable/reference/datasets.html?highlight=VOCBboxDataset#vocbboxdataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "pL6tzyZpp5rX"
   },
   "source": [
    "The following table is stated. This dataset should look like a list with the following in each element:\n",
    "\n",
    "| name\t| shape |\tdtype | \tformat |\n",
    "|:--|:--|:--|:--|\n",
    "| img | (3,H,W) | float32 | RGB, [0,255] |\n",
    "| bbox | (R,4) | float32 | (ymin,xmin,ymax,xmax) |\n",
    "| label | (R,) | int32 | [0,#fg_class−1] |\n",
    "| difficult (optional)* | (R,) | bool | – |\n",
    "\n",
    "* #fg_class is the number of classes of foreground (foreground)\n",
    "* difficult only effective when `return_difficult = True`\n",
    "\n",
    "However, since the `return_difficult` option has not been set to `True` explicitly when creating the dataset object this time, the default value `False` is used. Therefore, it does not return the `difficult` element which is in the last row of the above table.\n",
    "\n",
    "All of the three dataset objects created this time are three arrays of each element \n",
    "`Image data`,`correct bbox list`, and `class for each bbox`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 35
    },
    "colab_type": "code",
    "id": "cJgzQGoqpyhl",
    "outputId": "0cee0e19-d7c0-413f-ce99-113cf7d19a26"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 8,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(first_datum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "VM2lxzkHa2DY"
   },
   "source": [
    "Certainly, the number of elements was three. Let's take out image data and look at its shape and dtype."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 35
    },
    "colab_type": "code",
    "id": "zyXkCAJSraM4",
    "outputId": "3d4d4c57-370c-4064-cb2d-56e3c7096e2e"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'first_datum' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-8bfb1700b6fb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfirst_datum\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfirst_datum\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'first_datum' is not defined"
     ]
    }
   ],
   "source": [
    "print(first_datum[0].shape, first_datum[0].dtype)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "bkixGpqRrdVb"
   },
   "source": [
    "Clearly, it is in the form of `(3 = number of channels, H = height, W = width)`, and the data type is `float32`. It was as it was in the table above. So what format is bbox like? Let's display contents and show its shape."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 377
    },
    "colab_type": "code",
    "id": "-P12EOkCr617",
    "outputId": "83e1f0ba-8ae0-4016-aa7d-df2c0f8284c9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[314.  67. 479. 285.]\n",
      " [360. 345. 453. 445.]\n",
      " [178.  52. 298. 145.]\n",
      " [399. 448. 479. 535.]\n",
      " [131. 460. 211. 547.]\n",
      " [294. 453. 374. 540.]\n",
      " [282. 416. 382. 507.]\n",
      " [341. 277. 450. 368.]\n",
      " [ 61. 544. 158. 635.]\n",
      " [ 90. 484. 187. 575.]\n",
      " [170. 375. 252. 437.]\n",
      " [176. 328. 270. 394.]\n",
      " [ 58. 290. 167. 406.]\n",
      " [  0. 298.  67. 403.]\n",
      " [ 25. 345. 137. 448.]\n",
      " [  0. 133.  94. 240.]\n",
      " [ 37.   0. 163.  97.]\n",
      " [159. 164. 263. 256.]\n",
      " [208. 463. 318. 565.]]\n",
      "(19, 4)\n"
     ]
    }
   ],
   "source": [
    "print(first_datum[1])\n",
    "print(first_datum[1].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "C-204SZmsFmd"
   },
   "source": [
    "Information of 19 bboxes is lined up, and each one is represented by four numbers, `(y_min, x_min, y_max, x_max)`. These four numbers represent the image coordinates (the position on the image plane) of the upper left and lower right of the bbox.\n",
    "\n",
    "For each object appearing in the image, outputting these four numbers is one of the goals of object detection. However, in addition to that, it also needs to output which class each bbox belongs to (the type of object inside that bbox). Correct information about this is contained in the last element. Let's see this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 53
    },
    "colab_type": "code",
    "id": "JB3MoEt1s0ii",
    "outputId": "66aa0693-ea55-4260-9a53-31282e2d5bcc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "(19,)\n"
     ]
    }
   ],
   "source": [
    "print(first_datum[2])\n",
    "print(first_datum[2].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "e8uxffsXs4rH"
   },
   "source": [
    "There were 19 numbers. Each of them corresponds to bbox (`first_datum[1]`) displayed above in order, and it indicates which (0: RBC, 1: WBC, 2: Platelet) class each bbox belongs to."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "WFV-jPd36VHo"
   },
   "source": [
    "Lastly, let's visualize and check one data point in the dataset which is grouped by these three elements. We extract one image extracted from the train data set and its corresponding class label of bbox and their corresponding class labels, display the image using a convenient function for visualization provided by ChainerCV, and then display the names of classes that correspond to the bounding box superimposed there."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 301
    },
    "colab_type": "code",
    "id": "tzDvP_8W8V63",
    "outputId": "3938dc2f-350e-419d-9248-e24c015fb108"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAW0AAAEcCAYAAAAMf+VGAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzsvXv0bVlV3/mZc+29z/ndR70o4F4e\nIoIFaisPsTAmkAQcqMEenTYJijEGk/TwkdEjGdqRSIJmZBjtEV+JGhRG59WtbSeddOKLgIpGokmr\nkSAQ6aG8qgqouq+6VXXv/f1+5+y15uw/5lp77/P73VtAhqQKcleNU/f8ztlnP9ZjPr7zO+cSd+dm\n++Q1EXnq7/3e7/2Tz/7szz58LO/j93//99d33XXXa9z9I4/lffxBtJt9erP9t9z0sb6Bm+1mu9lu\ntpvt4283hfbNdrPdbDfbp1C7KbRvtpvtZrvZPoXaTaF9s91sN9vN9inUbgrtm+1mu9lutk+hdlNo\n32w32812s30KtZtC+3Hc3vve9574qq/6qi9+rO/j06Xd7M+b7dOhdY/1DdxsN27vfve7b3nWs571\nyGN9H58u7ePtz1IKH/jAB9Yf67h77rlnBZwRkT+Q+7tBu9/d7ZN5gZvtU6vdFNqPw/ayl73sj37B\nF3zBpdtvv3177ty5vT/9p//0iy9fvrz+vu/7vne88IUvvPIjP/Ijz3jzm9/89FKKfP3Xf/37vu7r\nvu7+x/qeH8/tE+3PF7/4xZcvX778gjNnzjyqsHzGM56Rfud3fueH9vb2Np+M+77vvvtWL3/5y18N\n3EzeudmmdlNoP87ahQsX+osXL574lm/5lt/87u/+7s997nOf+/DrXve6973pTW96+k/8xE98Rinl\nvl/4hV946s/8zM/8+qVLl/rv+q7v+tybQvvG7b+kP1/84hdfPnPmjH3GZ3zGowrtg4MDKaVsTp06\n9ZhmZt5s/221m5j246y9613vOv385z///F133XXw4Q9/+NQ3f/M3fwjg5MmTeRxH/dmf/dmzX/mV\nX3lf3/d+5syZ7Rvf+MZ3Psa3/LhuN/vzZvt0azeF9uOsvfe97z393Oc+9+H9/X3NOevtt9+eAd73\nvvedetaznnXlvvvuO/mZn/mZ+4/1fX6qtJv9ebN9urWbQvtx1t7//veffs5znnPlXe961+krV64M\n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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbfcf1bcb38>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "from chainercv.visualizations import vis_bbox\n",
    "\n",
    "img, bbox, label = train_dataset[0]\n",
    "ax = vis_bbox(img, bbox, label, label_names=bccd_labels)\n",
    "ax.set_axis_off()\n",
    "ax.figure.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data preparation is completed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "KxgG56IWUJL8"
   },
   "source": [
    "##  Single Shot Multibox Detector (SSD) \n",
    "\n",
    "Next, we will briefly explain the model to train. For this time we will use the technique called [Single Shot MultiBox Detector (SSD)](https://arxiv.org/abs/1512.02325)\n",
    "\n",
    "SSD is a kind of object detection method called single stage type as mentioned above. First, **feature maps** are extracted from images by using a network structure which has achieved great results with image classification like VGG or ResNet . We prepare candidates for each position of feature maps (In the SSD paper, it is called default box, but anchor is more commonly used). Each candidate region has a different form (square, portrait, landscape, different sizes, etc.). For example, we prepare 16 x 16 candidates, 16 x 12 candidates, 12 x 16 candidates at the position of (x = 0, y = 0) in the feature map. Then find the candidate that is most **appropriate** for the **correct answer**, calculate **how far candidates are deviated from the correct bounding box**, and train to minimize this deviation. At the same time,  predict **which class the object in each area belongs to**, then train it also to reduce error. Ensure that you can predict the situation where no candidate that did not match any correct answer was in that position. For more details on this process, please refer to the [original paper](https://arxiv.org/abs/1512.02325).\n",
    "\n",
    "On the other hand, in a two stage type technique, Faster R-CNN for example, another network predicts a candidate region (region proposal) of an object with respect to the extracted feature map, and create a feature vector of each candidate region (a calculation called RoI pooling is used) using the result, then **further pass to two different small networks for solving classification problem and solving regression problem of finding the correction amount for the position and size of candidate region**.\n",
    "\n",
    "For this reason, it is generally said that a single stage type network is faster. On the other hand, it is said that the accuracy of two stage type is higher. For such a trade-off, the following figure is often referred to from the paper ([Speed/accuracy trade-offs for modern convolutional object detectors](https://arxiv.org/abs/1611.10012)) comparing various object detection methods.\n",
    "\n",
    "![Relation between prediction accuracy and execution speed](https://raw.githubusercontent.com/preferred-medicine/medical-ai-course-materials/master/notebooks/images/speed-accuracy-tradeoffs.png)\n",
    "\n",
    "The network architecture of the SSD method used this time has the following form (cited from Fig. 2 of the SSD paper).\n",
    "\n",
    "![Network structure of SSD](https://raw.githubusercontent.com/preferred-medicine/medical-ai-course-materials/master/notebooks/images/ssd-architecture.png)\n",
    "\n",
    "The VGG-16 network that performs feature extraction is constructed by stacking many convolutional layers. It is designed to lower the resolution of the feature map by applying the pooling process to each of a group of several convolutional layers and acquire more abstract expressions as they accumulate.\n",
    "\n",
    "It is a feature of SSD that it enables consideration of multiple scales, by holding the intermediate output at the time when the data passed through each block, finally utilizing the intermediate output (the feature map of different size) taken out from several different depths."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "6C2PUFUY4-RF"
   },
   "source": [
    "## Model of definition \n",
    "\n",
    "Implementation of the network part of SSD is provided by ChainerCV. The class called `chainercv.links.SSD300` in ChainerCV represents a model of SSD with input of 300 pixels vertically and horizontally, and by default the feature extractor uses 16 layers of network structure called [VGG16](https://arxiv.org/abs/1409.1556).\n",
    "\n",
    "Let's prepare a class that calculates the loss function necessary for training.\n",
    "\n",
    "Class that is defined below receives, via a constructor, the object of the SSD model, hyper-parameters for the loss calculation `alpha` and `k`.\n",
    "\n",
    "`alpha` is a coefficient that represents weights between error for position prediction and error for class prediction, respectively. `k` is a parameter for hard negative mining. During the traning, for one correct bounding box, the model outputs at least one close (positive) prediction and many false (negative) predictions. Basically, we sort these many wrong predictions by the confidence score (value expressing how confidently the model is outputting that prediction), then select negative samples so that positive:negative becomes 1:k from the top, and use it to calculate the loss. It is `k` a parameter that determines this balance (𝑘=3 is used in the above paper, we also use 𝑘=3 by default.\n",
    "\n",
    "In the `forward` method, we receive the input image and the list of correct positions and labels, and actually calculate the loss. Object detection solves two problems of object localization (prediction of position) and classification (prediction of type (= class)), however, SSD calculates localization loss and classification loss separately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 107
    },
    "colab_type": "code",
    "id": "txQImfl1FAix",
    "outputId": "eab836c9-a675-45a6-8ca4-19b2b6b0ee59"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading ...\n",
      "From: https://chainercv-models.preferred.jp/ssd_vgg16_imagenet_converted_2017_06_09.npz\n",
      "To: /root/.chainer/dataset/_dl_cache/b4130ae0aa259c095b50ff95d81c32ee\n",
      "  %   Total    Recv       Speed  Time left\n",
      "100   76MiB   76MiB   3745KiB/s    0:00:00"
     ]
    }
   ],
   "source": [
    "import chainer\n",
    "from chainercv.links import SSD300\n",
    "from chainercv.links.model.ssd import multibox_loss\n",
    "\n",
    "\n",
    "class MultiboxTrainChain(chainer.Chain):\n",
    "\n",
    "    def __init__(self, model, alpha=1, k=3):\n",
    "        super(MultiboxTrainChain, self).__init__()\n",
    "        with self.init_scope():\n",
    "            self.model = model\n",
    "        self.alpha = alpha\n",
    "        self.k = k\n",
    "\n",
    "    def forward(self, imgs, gt_mb_locs, gt_mb_labels):\n",
    "        mb_locs, mb_confs = self.model(imgs)\n",
    "        loc_loss, conf_loss = multibox_loss(\n",
    "            mb_locs, mb_confs, gt_mb_locs, gt_mb_labels, self.k)\n",
    "        loss = loc_loss * self.alpha + conf_loss\n",
    "\n",
    "        chainer.reporter.report(\n",
    "            {'loss': loss, 'loss/loc': loc_loss, 'loss/conf': conf_loss},\n",
    "            self)\n",
    "\n",
    "        return loss\n",
    "\n",
    "    \n",
    "model = SSD300(n_fg_class=len(bccd_labels), pretrained_model='imagenet')\n",
    "train_chain = MultiboxTrainChain(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Vl3Ov3339XYf"
   },
   "source": [
    "Running the above cell will automatically download the weight (pre-trained model) used when training the network called VGG 16 with the ImageNet-1K data set (large scale dataset of image classification).\n",
    "\n",
    "In general, large-scale data sets are required for training of deep learning models, but in some cases it is practically difficult to gather large amounts of data according for individual tasks. In such a case, a training method called Fine-tuning is effective, in which a model is pre-trained with a large-scale image classification data set that has been published (pre-trained model), and re-train it with a small data set at hand. Using a large-scale image classification data set, it is expected that the pre-trained model already has the ability to extract most of the features of various images in the real world, there is a possibility of obtaining high accuracy even with less training when it is for the similar task or data set.\n",
    "\n",
    "ChainerCV provides several pre-trained models in such a way that they can start using it very easily. Various pre-trained models are listed here: [Pretrained Models](https://chainercv.readthedocs.io/en/latest/license.html#pretrained-models)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "_IkIitVjxB_i"
   },
   "source": [
    "## Implementation of data augmentation \n",
    "\n",
    "In deep learning, whether the large amount of data can be prepared greatly affects the generalization performance of the model. A **technique (data augmentation) that applies various transformations to images and accompanying labels without changing the meaning of the data so as to increase data in a pseudo manner** is a method to inflate training data.\n",
    "\n",
    "In the following, you define a class describing the conversion process you want to apply to each data point in the training data set. The conversion to be done is five described in the `__call__` method. For example, you can change the color, flip it horizontally, enlarge, or shrink as long as the meaning of the image does not change much. Please note that correct answer labels need to be converted properly in those cases. For example, if you flip it in the horizontal direction, the correct solution is the one with the correct answer label flipped in the horizontal direction. Also, it is an effective technique to mask and hide part of the image. This makes it possible to recognize based on various information without relying on only one information in recognition.\n",
    "\n",
    "Let's execute the following cells."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "8bc3HkQpGRup"
   },
   "outputs": [],
   "source": [
    "import copy\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "from chainercv import transforms\n",
    "from chainercv.links.model.ssd import random_crop_with_bbox_constraints\n",
    "from chainercv.links.model.ssd import random_distort\n",
    "from chainercv.links.model.ssd import resize_with_random_interpolation\n",
    "\n",
    "\n",
    "class Transform(object):\n",
    "\n",
    "    def __init__(self, coder, size, mean):\n",
    "        # to send cpu, make a copy\n",
    "        self.coder = copy.copy(coder)\n",
    "        self.coder.to_cpu()\n",
    "\n",
    "        self.size = size\n",
    "        self.mean = mean\n",
    "\n",
    "    def __call__(self, in_data):\n",
    "        # There are five data augmentation steps\n",
    "        # 1. Color augmentation\n",
    "        # 2. Random expansion\n",
    "        # 3. Random cropping\n",
    "        # 4. Resizing with random interpolation\n",
    "        # 5. Random horizontal flipping\n",
    "\n",
    "        img, bbox, label = in_data\n",
    "\n",
    "        # 1. Color augmentation\n",
    "        img = random_distort(img)\n",
    "\n",
    "        # 2. Random expansion\n",
    "        if np.random.randint(2):\n",
    "            img, param = transforms.random_expand(\n",
    "                img, fill=self.mean, return_param=True)\n",
    "            bbox = transforms.translate_bbox(\n",
    "                bbox, y_offset=param['y_offset'], x_offset=param['x_offset'])\n",
    "\n",
    "        # 3. Random cropping\n",
    "        img, param = random_crop_with_bbox_constraints(\n",
    "            img, bbox, return_param=True)\n",
    "        bbox, param = transforms.crop_bbox(\n",
    "            bbox, y_slice=param['y_slice'], x_slice=param['x_slice'],\n",
    "            allow_outside_center=False, return_param=True)\n",
    "        label = label[param['index']]\n",
    "\n",
    "        # 4. Resizing with random interpolatation\n",
    "        _, H, W = img.shape\n",
    "        img = resize_with_random_interpolation(img, (self.size, self.size))\n",
    "        bbox = transforms.resize_bbox(bbox, (H, W), (self.size, self.size))\n",
    "\n",
    "        # 5. Random horizontal flipping\n",
    "        img, params = transforms.random_flip(\n",
    "            img, x_random=True, return_param=True)\n",
    "        bbox = transforms.flip_bbox(\n",
    "            bbox, (self.size, self.size), x_flip=params['x_flip'])\n",
    "\n",
    "        # Preparation for SSD network\n",
    "        img -= self.mean\n",
    "        mb_loc, mb_label = self.coder.encode(bbox, label)\n",
    "\n",
    "        return img, mb_loc, mb_label"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Vna61U_r1elL"
   },
   "source": [
    "## Start of the training \n",
    "\n",
    "In the following, we will use the dataset class `TransformDataset` provided by Chainer to apply the transformation `Transform` we just defined to each data.\n",
    "\n",
    "Since the basic flow is common to many of the network training methods which do image classification and segmentation we have already learned, detailed explanation is omitted here.\n",
    "\n",
    "First, import the necessary modules. we will adopt SSD 300, provided by ChainerCV, as the neural network to be trained, and use its implementation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "b16uCQuTDyMf"
   },
   "outputs": [],
   "source": [
    "from chainer.datasets import TransformDataset\n",
    "from chainer.optimizer_hooks import WeightDecay\n",
    "from chainer import serializers\n",
    "from chainer import training\n",
    "from chainer.training import extensions\n",
    "from chainer.training import triggers\n",
    "from chainercv.extensions import DetectionVOCEvaluator\n",
    "from chainercv.links.model.ssd import GradientScaling\n",
    "\n",
    "chainer.cuda.set_max_workspace_size(1024 * 1024 * 1024)\n",
    "chainer.config.autotune = True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Zbg2y0V3FHZL"
   },
   "source": [
    "Next, assign the following setting items to variables here for easy change later.\n",
    "\n",
    "- Batch size\n",
    "- ID of the GPU to be used\n",
    "- Directory name for output result\n",
    "- Initial value of learning rate\n",
    "- Number of epochs to be trained\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "rjHq_iyAiF3n"
   },
   "outputs": [],
   "source": [
    "batchsize = 32\n",
    "gpu_id = 0\n",
    "out = 'results'\n",
    "initial_lr = 0.001\n",
    "training_epoch = 300\n",
    "log_interval = 10, 'epoch'\n",
    "lr_decay_rate = 0.1\n",
    "lr_decay_timing = [200, 250]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xBu7X1LkQDay"
   },
   "source": [
    "Next, we create dataset classes and iterators. This is the same as in the case of image classification already learned. The data points extracted from the data set are converted by the conversion process defined in each predefined `Transform` class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "hkvJT9T2JQZQ"
   },
   "outputs": [],
   "source": [
    "transformed_train_dataset = TransformDataset(train_dataset, Transform(model.coder, model.insize, model.mean))\n",
    "\n",
    "train_iter = chainer.iterators.MultiprocessIterator(transformed_train_dataset, batchsize)\n",
    "valid_iter = chainer.iterators.SerialIterator(valid_dataset, batchsize, repeat=False, shuffle=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "PsMLVEBmaLgt"
   },
   "source": [
    "Next we will create Optimizer. This time, we will optimize the parameters of the model using the technique called Momentum SGD. In doing so, we set hooks for `update_rule` so that the slope is twice as large as the bias parameter of the linear transformation in the model. Also, in the case of bias parameters, weight decay is not performed, and weight decay is set for parameters other than bias parameters. These are techniques often used to stabilize training, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wPlpMS6GaKtn"
   },
   "outputs": [],
   "source": [
    "optimizer = chainer.optimizers.MomentumSGD()\n",
    "optimizer.setup(train_chain)\n",
    "for param in train_chain.params():\n",
    "    if param.name == 'b':\n",
    "        param.update_rule.add_hook(GradientScaling(2))\n",
    "    else:\n",
    "        param.update_rule.add_hook(WeightDecay(0.0005))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "MaphckAqbs8N"
   },
   "source": [
    "Next we will create an updater object. This time, we use the simplest `StandardUpdater` as an updater. We use this updater when training with CPU or single GPU."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "piaH0WI0MhlP"
   },
   "outputs": [],
   "source": [
    "updater = training.updaters.StandardUpdater(\n",
    "    train_iter, optimizer, device=gpu_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8c08etI3MjPD"
   },
   "source": [
    "Finally, we create a Trainer object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ukuSXJeWFGI8"
   },
   "outputs": [],
   "source": [
    "trainer = training.Trainer(\n",
    "    updater,\n",
    "    (training_epoch, 'epoch'), out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "FF5FyZwD1lxm"
   },
   "source": [
    "There are no new additions of Trainer Extension from the one described in the previous chapter, but the method of specifying the new attenuation timing called `ManualScheduleTrigger` is used for attenuation of learning rate using ExponentialShift below. If you pass a list of numbers, like `[200, 250]`, that show the timing when you want to start that Extention, and that unit (here `epoch`), it will simply invoke that extension only at the specified timing. In the following code, since `[200, 250]` is assigned to `lr_decay_timing` above, at the time of 200 epochs and 250 epochs, ExponentialShift is invoked, multiplying the learning rate by `lr_decay_rate0`, that is, as set above as 0.1 times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "P1EUixJXFHIt"
   },
   "outputs": [],
   "source": [
    "trainer.extend(\n",
    "    extensions.ExponentialShift('lr', lr_decay_rate, init=initial_lr),\n",
    "    trigger=triggers.ManualScheduleTrigger(lr_decay_timing, 'epoch'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5JzAWZU42ffI"
   },
   "source": [
    "### Evaluation Index\n",
    "\n",
    "For object detection, the **case where the bbox (bbox to which confidence exceeding a certain value was given) that the model determined as \"detected\" is actually true bbox and IoU > 0.5 or more is regarded as True Positive**, and the **average precision (AP)** is generally used for evaluation. In addition, Mean average precision (mAP) which calculates this for each class and takes an average as a whole is also used. IoU is described in the explanation about the semantic segmentation in the previous chapter, but the IoU in object detection is the same as well, refers to the size of the area enclosed in common divided by the size of the area enclosed by either or both of the predicted rectangle and the correct rectangle\n",
    "\n",
    "The extension provided by ChainerCV `DetectionVOCEvaluator` calculates the AP and the whole mAP for each class while learning, using the passed iterator (an iterator val_iter created for the validation dataset here). Again we will use this Extension.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "0LVmVTyFFKFa"
   },
   "outputs": [],
   "source": [
    "trainer.extend(\n",
    "    DetectionVOCEvaluator(\n",
    "        valid_iter, model, use_07_metric=False,\n",
    "        label_names=bccd_labels),\n",
    "    trigger=(1, 'epoch'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5NeOH5Mp3c36"
   },
   "source": [
    "Let's add another commonly used extension. For this time, I will save the results of learning every 10 epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "LVanJEFQGX8V"
   },
   "outputs": [],
   "source": [
    "trainer.extend(extensions.LogReport(trigger=log_interval))\n",
    "trainer.extend(extensions.observe_lr(), trigger=log_interval)\n",
    "trainer.extend(extensions.PrintReport(\n",
    "    ['epoch', 'iteration', 'lr',\n",
    "     'main/loss', 'main/loss/loc', 'main/loss/conf',\n",
    "     'validation/main/map', 'elapsed_time']),\n",
    "    trigger=log_interval)\n",
    "if extensions.PlotReport.available():\n",
    "    trainer.extend(\n",
    "        extensions.PlotReport(\n",
    "            ['main/loss', 'main/loss/loc', 'main/loss/conf'],\n",
    "            'epoch', file_name='loss.png'))\n",
    "    trainer.extend(\n",
    "        extensions.PlotReport(\n",
    "            ['validation/main/map'],\n",
    "            'epoch', file_name='accuracy.png'))\n",
    "trainer.extend(extensions.snapshot(\n",
    "    filename='snapshot_epoch_{.updater.epoch}.npz'), trigger=(10, 'epoch'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Ot3YI04zBaeT"
   },
   "source": [
    "Now, you would do:\n",
    "\n",
    "```python\n",
    "trainer.run()\n",
    "```\n",
    "\n",
    "traing will begin immediately, but it will take about 100 minutes. So I just ran this script beforehand and saved the result of learning up to 290 epochs so let's read this and train only the last 10 epochs. First, download snapshot which is halfway through learning up to 290 epoch points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 325
    },
    "colab_type": "code",
    "id": "CszVOTunB24k",
    "outputId": "44b025d6-34fa-4cb6-f706-4faf4398403a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2018-12-16 13:36:44--  https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/detection_snapshot_epoch_290.npz\n",
      "Resolving github.com (github.com)... 140.82.118.3, 140.82.118.4\n",
      "Connecting to github.com (github.com)|140.82.118.3|:443... connected.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/8191fa00-e78e-11e8-8a9b-3b2647ec012b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181216%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181216T133644Z&X-Amz-Expires=300&X-Amz-Signature=8db368451cd08ed3f63daaf1a71d6fc8e00d5e1d60c84eeee422ef7d79c57fe0&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Ddetection_snapshot_epoch_290.npz&response-content-type=application%2Foctet-stream [following]\n",
      "--2018-12-16 13:36:44--  https://github-production-release-asset-2e65be.s3.amazonaws.com/153412006/8191fa00-e78e-11e8-8a9b-3b2647ec012b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181216%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181216T133644Z&X-Amz-Expires=300&X-Amz-Signature=8db368451cd08ed3f63daaf1a71d6fc8e00d5e1d60c84eeee422ef7d79c57fe0&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Ddetection_snapshot_epoch_290.npz&response-content-type=application%2Foctet-stream\n",
      "Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.216.136.83\n",
      "Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.136.83|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 179653491 (171M) [application/octet-stream]\n",
      "Saving to: ‘detection_snapshot_epoch_290.npz’\n",
      "\n",
      "detection_snapshot_ 100%[===================>] 171.33M  23.7MB/s    in 11s     \n",
      "\n",
      "2018-12-16 13:36:55 (16.1 MB/s) - ‘detection_snapshot_epoch_290.npz’ saved [179653491/179653491]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget https://github.com/japan-medical-ai/medical-ai-course-materials/releases/download/v0.1/detection_snapshot_epoch_290.npz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "vyiF3r8PB7M4"
   },
   "source": [
    "Next, let's load this downloaded file `detection_snapshot_epoch_250.npz` into the Trainer object created earlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GMy3hGxsCH_W"
   },
   "outputs": [],
   "source": [
    "chainer.serializers.load_npz('detection_snapshot_epoch_290.npz', trainer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "E4eiRfqd3zlu"
   },
   "source": [
    "Let's train only the last 10 epochs. Please execute the following cell and wait for a moment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 595
    },
    "colab_type": "code",
    "id": "pQhYbIWlD0JA",
    "outputId": "34de9dd1-78fe-4931-b865-5fe13d72ffa6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch       iteration   lr          main/loss   main/loss/loc  main/loss/conf  validation/main/map  elapsed_time\n",
      "\u001b[J10          65          0.001       6.75134     2.08291        4.66843         0.118168             230.543       \n",
      "\u001b[J20          129         0.001       4.12112     1.58375        2.53737         0.181493             435.038       \n",
      "\u001b[J30          193         0.001       3.59885     1.31919        2.27966         0.279919             635.634       \n",
      "\u001b[J40          257         0.001       3.1998      1.07375        2.12605         0.573733             835.256       \n",
      "\u001b[J50          321         0.001       2.94131     0.926096       2.01522         0.657611             1034.6        \n",
      "\u001b[J60          385         0.001       2.86323     0.887698       1.97553         0.670849             1233.12       \n",
      "\u001b[J70          449         0.001       2.73648     0.819021       1.91746         0.696257             1428.25       \n",
      "\u001b[J80          513         0.001       2.63796     0.765831       1.87212         0.692361             1625.98       \n",
      "\u001b[J90          577         0.001       2.55598     0.738259       1.81773         0.711002             1821.58       \n",
      "\u001b[J100         641         0.001       2.49245     0.701536       1.79092         0.713163             2019.14       \n",
      "\u001b[J110         705         0.001       2.46662     0.68411        1.78251         0.719259             2215.34       \n",
      "\u001b[J120         769         0.001       2.42422     0.668462       1.75576         0.716902             2410.75       \n",
      "\u001b[J130         833         0.001       2.38509     0.651328       1.73376         0.72674              2609.16       \n",
      "\u001b[J140         897         0.001       2.32725     0.62762        1.69963         0.734795             2809.84       \n",
      "\u001b[J150         961         0.001       2.28612     0.609401       1.67672         0.731203             3012.42       \n",
      "\u001b[J160         1025        0.001       2.26408     0.602341       1.66174         0.737827             3208.94       \n",
      "\u001b[J170         1090        0.001       2.26435     0.602011       1.66234         0.739109             3415.94       \n",
      "\u001b[J180         1154        0.001       2.20838     0.580387       1.62799         0.73633              3619          \n",
      "\u001b[J190         1218        0.001       2.1549      0.558059       1.59684         0.738508             3823.92       \n",
      "\u001b[J200         1282        0.001       2.1479      0.557085       1.59082         0.735312             4022.46       \n",
      "\u001b[J210         1346        0.0001      2.15193     0.566057       1.58587         0.743703             4218.82       \n",
      "\u001b[J220         1410        0.0001      2.06368     0.525004       1.53867         0.746575             4421.17       \n",
      "\u001b[J230         1474        0.0001      2.03127     0.510777       1.52049         0.748318             4629.21       \n",
      "\u001b[J240         1538        0.0001      2.03743     0.517596       1.51984         0.748923             4836.61       \n",
      "\u001b[J250         1602        0.0001      2.01771     0.50665        1.51106         0.74621              5044.15       \n",
      "\u001b[J260         1666        1e-05       1.9999      0.500324       1.49958         0.750594             5251.47       \n",
      "\u001b[J270         1730        1e-05       2.0164      0.502952       1.51345         0.749446             5459.1        \n",
      "\u001b[J280         1794        1e-05       2.0113      0.504592       1.50671         0.750496             5667.54       \n",
      "\u001b[J290         1858        1e-05       2.0113      0.507134       1.50417         0.750217             5871.16       \n",
      "\u001b[J300         1922        1e-05       2.0002      0.496281       1.50392         0.749795             6107.78       \n"
     ]
    }
   ],
   "source": [
    "trainer.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "2WQvm6dA75Fj"
   },
   "source": [
    "Training is completed. From the next section we will try **to infer** the **unknown data** using the new snapshot obtained as a result of this training."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "r_-w5hq9H_Vp"
   },
   "source": [
    "## Inference using training result \n",
    "\n",
    "The parameters of the model obtained as a result of training are saved in the file by the Trainer extension called `extensions.snapshot()`. By default, the save destination is less than or equal to the directory specified by the argument `out` that it was passed at the time of Trainer object initialization. This time, it should be under `results`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 143
    },
    "colab_type": "code",
    "id": "PhSj9nLmtzZa",
    "outputId": "b20ba5e5-1854-43ea-a1fd-0198cf13cb9e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 175520\n",
      "drwxr-xr-x 2 root root      4096 Dec 16 13:41 .\n",
      "drwxr-xr-x 1 root root      4096 Dec 16 13:36 ..\n",
      "-rw-r--r-- 1 root root     16448 Dec 16 13:40 accuracy.png\n",
      "-rw-r--r-- 1 root root     14213 Dec 16 13:40 log\n",
      "-rw-r--r-- 1 root root     19216 Dec 16 13:40 loss.png\n",
      "-rw-r--r-- 1 root root 179665430 Dec 16 13:41 snapshot_epoch_300.npz\n"
     ]
    }
   ],
   "source": [
    "!ls -la results/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "R-WTt7zct2_x"
   },
   "source": [
    "As a result of executing the above shell command, a file called `snapshot_epoch_300.npz` should be found. This is a collection of the parameters necessary for restarting the training that was in Trainer during training. For that reason, parameters other than the parameters that the model itself had inside, such as the parameters that the Optimizer has inside, are stored together. Therefore, this time we will use only the parameters of the model necessary for inference from this file and use it.\n",
    "\n",
    "As a way to retrieve the model parameters, using `chainer.serializers.load_npz`, there’s a way to see only what are under the specific hierarchy by specifying keys in `.npz` file. When taking a snapshot of the entire Trainer object, other than the parameters inside the model, such as information on the iteration count of the Optimizer, are also stored, but if you pass the prefix `updater/model:main/model`, you can retrieve only the parameter part of the model.\n",
    "\n",
    "In the place different from the one used for training, assuming a situation where only the snapshot and the code of the definition of the model are passed, let's create a new model object and load pre-trained parameters there."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "04bv0Xj0xcYw"
   },
   "outputs": [],
   "source": [
    "# Create a model object\n",
    "model = SSD300(n_fg_class=len(bccd_labels), pretrained_model='imagenet')\n",
    "\n",
    "# Load parameters to the model\n",
    "chainer.serializers.load_npz(\n",
    "    'results/snapshot_epoch_300.npz', model, path='updater/model:main/model/')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ThVC22T-zh1S"
   },
   "source": [
    "Let's try to detect the cells with one of the test images using the model loaded with the trained weights. In the following code, we read images, execute inference, and visualize the results in order using ChainerCV."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 297
    },
    "colab_type": "code",
    "id": "UJajAAU6yHoY",
    "outputId": "dd080ee7-320d-44c3-e228-92bc7ec885b0"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fbfcaac89e8>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from chainercv import utils\n",
    "\n",
    "def inference(image_filename):\n",
    "    # Load a test image\n",
    "    img = utils.read_image(image_filename, color=True)\n",
    "\n",
    "    # Perform inference\n",
    "    bboxes, labels, scores = model.predict([img])\n",
    "\n",
    "    # Extract the results\n",
    "    bbox, label, score = bboxes[0], labels[0], scores[0]\n",
    "\n",
    "    # Visualize the detection results\n",
    "    ax = vis_bbox(img, bbox, label, label_names=bccd_labels)\n",
    "    ax.set_axis_off()\n",
    "    ax.figure.tight_layout()\n",
    "    \n",
    "inference('BCCD_Dataset/BCCD/JPEGImages/BloodImage_00007.jpg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "GTAmjlxA4fbQ"
   },
   "source": [
    "Let's further infer some images and take a look at the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 2379
    },
    "colab_type": "code",
    "id": "uuuGBnI24vin",
    "outputId": "930d94e4-7b6e-4447-ff3f-9cb1a17a003d"
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'BCCD_Dataset/BCCD/ImageSets/Main/test.txt'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-705ffab8b5bd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimage_filename\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'BCCD_Dataset/BCCD/ImageSets/Main/test.txt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage_filename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'BCCD_Dataset/BCCD/ImageSets/Main/test.txt'"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "for i, image_filename in enumerate(open('BCCD_Dataset/BCCD/ImageSets/Main/test.txt')):\n",
    "    print(image_filename)\n",
    "    plt.clf()\n",
    "    inference('BCCD_Dataset/BCCD/JPEGImages/' + image_filename.strip() + '.jpg')\n",
    "    plt.show()\n",
    "\n",
    "    if i > 5:  # finish after displaying 5+1 items\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "BOkNITfvkMrq"
   },
   "source": [
    "## Evaluating trained model \n",
    "\n",
    "After training, we evaluate the obtained model with the test dataset. Validation data set is not used directly to calculate parameter update amount during learning, however, **it is used for adjusting hyperparameters** such as learning rate and ratio / timing of learning rate attenuation. **Strictly speaking, it is not true that the validation dataset was not used for the training**. Therefore, in order to obtain an indication of the extent of the generalization performance of the finally obtained model, it is necessary to **evaluate using the third data set not included in any of the training / verification data set**.\n",
    "\n",
    "Evaluator, one of Chainer's Trainer Extensions, can actually be used alone, wit outh Trainer. `DetectionVOCEvaluatoran` ChainerCV provides, as it is an extension version Evaluator inherited from Chainer's Evaluator, it can be used for evaluation only independent from Trainer as well.\n",
    "\n",
    "Now, let's use `test_dataset` prepared at the beginning, passes it along with the trained model used earlier to  `DetectionVOCEvaluator`, and perform the final performance evaluation using the test data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 89
    },
    "colab_type": "code",
    "id": "086lPYIrhoa0",
    "outputId": "79e77e5b-39e5-4c06-e13e-b5fd2636a56e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'main/ap/platelets': 0.43220927662530395,\n",
       " 'main/ap/rbc': 0.760081977582848,\n",
       " 'main/ap/wbc': 0.9651693947468596,\n",
       " 'main/map': 0.7191535496516704}"
      ]
     },
     "execution_count": 31,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_batchsize = 256\n",
    "\n",
    "model.to_gpu()\n",
    "\n",
    "test_iter = chainer.iterators.SerialIterator(\n",
    "    test_dataset, test_batchsize, repeat=False, shuffle=False)\n",
    "\n",
    "test_evaluator = DetectionVOCEvaluator(\n",
    "    test_iter, model, use_07_metric=False,\n",
    "    label_names=bccd_labels)\n",
    "\n",
    "test_evaluator()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cxmRfjcx9zGS"
   },
   "source": [
    "Looking at the results displayed here, we found that prediction for white blood cells is most accurate, then red blood cells, while platelets predictions are much lower than those of the other two. In these cases, it is necessary to check whether platelets, erythrocytes, white blood cells appear in the data set at the same frequency. If the frequency varies from class to class, the model seems to be able to observe less frequent classes less frequently than frequent classes. It is not the best way to handle training by treating them completely equally without distinction.\n",
    "\n",
    "Even when training an object detector with actual application, It is important to have phase where we examine the features etc by first trying training using a well known model, and obtain a result, then match the result with the data, and analyze the prediction trend of the model and the data set itself.\n",
    "\n",
    "As for the problem of Class imbalance, the method called [Focal loss](https://arxiv.org/abs/1708.02002) proposes a simple and powerful proposal. It may be helpful."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Blood Cell Detection",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
